<?php

namespace Tests\Feature;

use App\Models\OAuth\OAuthClient;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class OAuthClientCreationTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Create admin role if it doesn't exist
        if (!Role::where('name', 'admin')->exists()) {
            Role::create(['name' => 'admin']);
        }
        
        // Create and authenticate an admin user
        $user = User::factory()->create([
            'name' => 'Test Admin',
            'email' => 'admin@test.com',
            'is_active' => true,
            'password_changed_at' => now(),
        ]);
        
        // Assign admin role (using Spatie Permission)
        $user->assignRole('admin');
        
        $this->actingAs($user);
    }

    public function test_can_create_oauth_client_with_secret()
    {
        $data = [
            'name' => 'Test OAuth Client',
            'description' => 'A test OAuth client',
            'redirect_uris' => [
                'https://example.com/callback',
                'https://app.example.com/auth/callback'
            ],
            'grants' => ['authorization_code', 'refresh_token'],
            'scopes' => ['read', 'write', 'profile'],
            'is_confidential' => true,
            'environment' => 'development',
            'contact_email' => 'contact@example.com',
            'website_url' => 'https://example.com',
            'health_check_enabled' => true,
            'health_check_url' => 'https://example.com/health',
            'health_check_interval' => 300,
            'max_concurrent_tokens' => 1000,
            'rate_limit_per_minute' => 100,
        ];

        $response = $this->post(route('oauth-clients.store'), $data);

        $response->assertStatus(302);
        
        // Check that client was created
        $this->assertDatabaseHas('oauth_clients', [
            'name' => 'Test OAuth Client',
            'description' => 'A test OAuth client',
            'is_confidential' => true,
            'environment' => 'development',
            'contact_email' => 'contact@example.com',
            'website_url' => 'https://example.com',
            'is_active' => true,
            'revoked' => false,
        ]);

        $client = OAuthClient::where('name', 'Test OAuth Client')->first();
        
        // Verify client has all the expected properties
        $this->assertNotNull($client);
        $this->assertNotNull($client->secret); // Secret should be generated
        $this->assertNotNull($client->identifier);
        $this->assertEquals(['authorization_code', 'refresh_token'], $client->grants);
        $this->assertEquals(['read', 'write', 'profile'], $client->scopes);
        $this->assertEquals($data['redirect_uris'], $client->redirect_uris);
        $this->assertTrue($client->health_check_enabled);
        $this->assertEquals('https://example.com/health', $client->health_check_url);
        $this->assertEquals(300, $client->health_check_interval);
        $this->assertEquals(1000, $client->max_concurrent_tokens);
        $this->assertEquals(100, $client->rate_limit_per_minute);
        
        // Check that secret is stored in session for one-time display
        $this->assertEquals($client->secret, session('client_secret'));
        
        // Verify redirect to show page
        $response->assertRedirect(route('oauth-clients.show', $client));
    }

    public function test_can_create_public_oauth_client_without_secret()
    {
        $data = [
            'name' => 'Public OAuth Client',
            'description' => 'A public OAuth client',
            'redirect_uris' => ['https://example.com/callback'],
            'grants' => ['authorization_code'],
            'scopes' => ['read'],
            'is_confidential' => false,
            'environment' => 'development',
        ];

        $response = $this->post(route('oauth-clients.store'), $data);

        $response->assertStatus(302);
        
        $client = OAuthClient::where('name', 'Public OAuth Client')->first();
        
        $this->assertNotNull($client);
        $this->assertFalse($client->is_confidential);
        $this->assertNotNull($client->secret); // Secret is still generated by default
        
        // Since the client has a secret, it should be in session
        $this->assertEquals($client->secret, session('client_secret'));
    }

    public function test_oauth_client_creation_validation()
    {
        // Test required fields validation
        $response = $this->post(route('oauth-clients.store'), []);

        $response->assertStatus(302);
        $response->assertSessionHasErrors(['name', 'redirect_uris', 'grants', 'is_confidential', 'environment']);
    }

    public function test_oauth_client_creation_creates_event()
    {
        $data = [
            'name' => 'Event Test Client',
            'description' => 'A test OAuth client for events',
            'redirect_uris' => ['https://example.com/callback'],
            'grants' => ['authorization_code'],
            'scopes' => ['read'],
            'is_confidential' => true,
            'environment' => 'development',
        ];

        $this->post(route('oauth-clients.store'), $data);

        $client = OAuthClient::where('name', 'Event Test Client')->first();
        
        // Verify that an event was logged
        $this->assertDatabaseHas('oauth_client_events', [
            'client_id' => $client->id,
            'event_name' => 'client_created',
            'event_type' => 'system',
            'severity' => 'low',
        ]);
    }

    public function test_show_page_displays_client_secret_from_session()
    {
        // Create a client first
        $client = OAuthClient::factory()->create([
            'name' => 'Test Secret Display',
            'secret' => 'test-secret-12345',
        ]);

        // Simulate the session flash that happens after creation
        session()->flash('client_secret', $client->secret);

        $response = $this->get(route('oauth-clients.show', $client));

        $response->assertStatus(200);
        
        // Verify that the client secret is passed to the view
        $response->assertInertia(function ($page) use ($client) {
            $page->where('clientSecret', $client->secret)
                 ->where('client.id', $client->id)
                 ->where('client.name', 'Test Secret Display');
        });
    }

    public function test_show_page_does_not_display_secret_when_not_in_session()
    {
        $client = OAuthClient::factory()->create([
            'name' => 'No Secret Display',
            'secret' => 'test-secret-12345',
        ]);

        // Don't flash the secret to session (simulate normal viewing)

        $response = $this->get(route('oauth-clients.show', $client));

        $response->assertStatus(200);
        
        // Verify that no client secret is passed to the view
        $response->assertInertia(function ($page) {
            $page->where('clientSecret', null);
        });
    }
}